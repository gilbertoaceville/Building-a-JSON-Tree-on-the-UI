{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// Component returning JSON-string as a tree\nimport React, { Component, useState, createRef } from \"react\";\n/*\n *  default jsonRules for rendering basic types\n */\n\nlet jsonRules = [\n/* null */\n(name, value) => value === null ? __jsx(JsonString, {\n  name: name,\n  value: \"null\"\n}) : null,\n/* function */\n(name, value) => typeof value === \"function\" ? __jsx(JsonFunc, {\n  name: name,\n  value: value\n}) : null,\n/* iso date-time */\n(name, value) => typeof value === \"string\" && !isNaN(Date.parse(value)) ? __jsx(JsonDate, {\n  name: name,\n  value: value\n}) : null, //\n\n/* url */\n(name, value) => typeof value === \"string\" && (value.indexOf(\"http://\") === 0 || value.indexOf(\"https://\") === 0 || value.indexOf(\"www.\") === 0) ? __jsx(JsonLink, {\n  name: name,\n  value: value\n}) : null,\n/* string */\n(name, value) => typeof value === \"string\" ? __jsx(JsonString, {\n  name: name,\n  value: value\n}) : null,\n/* integer */\n(name, value) => typeof value === \"number\" ? __jsx(JsonInteger, {\n  name: name,\n  value: value\n}) : null,\n/* boolean */\n(name, value) => typeof value === \"boolean\" ? __jsx(JsonBoolean, {\n  name: name,\n  value: value\n}) : null,\n/* iterator */\n(name, value, depth) => typeof value === \"object\" && !Array.isArray(value) && typeof value[Symbol.iterator] === \"function\" ? __jsx(JsonArray, {\n  value: Array.from(value),\n  name: name + \"[iterable]\",\n  depth: depth\n}) : null,\n/* array */\n(name, value, depth) => typeof value === \"object\" && Array.isArray(value) ? __jsx(JsonArray, {\n  depth: depth,\n  value: value,\n  name: name + \" [ \" + value.length + \" ] \"\n}) : null,\n/* object */\n(name, value) => typeof value === \"object\" ? __jsx(JsonObject, {\n  value: value,\n  name: name + \" { \" + Object.keys(value).length + \" } \"\n}) : null];\n/*\n *   json tree\n */\n\nclass Json extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}; // merge jsonRules with custom data\n\n    jsonRules = Array.prototype.concat(this.props.jsonRules || [], jsonRules); // see if the parameter is json string or js obj\n\n    if (typeof this.props.data === \"string\") {\n      try {\n        let obj = JSON.parse(this.props.data);\n        this._dataObject = obj;\n      } catch (err) {\n        throw \"Error: cannot convert json string to object. \" + err;\n        this._dataObject = {};\n      }\n    } else if (typeof this.props.data === \"object\") {\n      this._dataObject = this.props.data;\n    } else {\n      throw \"Error: Data is not in the expected format. provided data = \" + JSON.stringify(this.props.data);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"Json\"\n    }, __jsx(KeyValue, _extends({\n      name: this.props.title || \"\",\n      value: this._dataObject\n    }, this.props)));\n  }\n\n}\n\nJson.displayName = \"JsonTree\";\n/*\n *   key-value pairs\n */\n\nconst KeyValue = props => {\n  let ret;\n\n  for (let i = 0; i < jsonRules.length; i++) {\n    let processed = jsonRules[i](props.name, props.value, props.depth);\n\n    if (processed) {\n      ret = processed;\n      break;\n    }\n  }\n\n  return ret;\n};\n\nKeyValue.displayName = \"KeyValue\";\n/*\n *  HideData panel component\n */\n\nconst HideData = props => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(true);\n\n  const toggle = e => {\n    e.preventDefault();\n    setOpen(!open);\n  };\n\n  return __jsx(\"div\", {\n    className: \"Json-Item\"\n  }, __jsx(\"div\", {\n    className: \"Json-Key\"\n  }, __jsx(\"a\", {\n    href: \"#\",\n    onClick: toggle,\n    className: \"HideData-Arrow\" + (open ? \" Open\" : \"\")\n  }, \"\\u25BC\"), __jsx(\"a\", {\n    href: \"#\",\n    onClick: toggle\n  }, open ? props.title + \":\" : props.title.includes(\"{\") ? \"{...}\" : \"[...]\")), __jsx(\"div\", {\n    className: \"HideData-Content Json-Value child-element\" + (open ? \"\" : \" Hidden\")\n  }, props.children));\n};\n\nclass JsonString extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      show: true,\n      hide: false,\n      text: null\n    });\n\n    _defineProperty(this, \"_input\", /*#__PURE__*/createRef());\n\n    _defineProperty(this, \"click\", () => {\n      this.setState({\n        show: false\n      });\n    });\n\n    _defineProperty(this, \"submitHandler\", e => {\n      e.preventDefault();\n      localStorage.setItem(\"text\", JSON.stringify(this._input.current.value));\n      this.setState(prevState => ({\n        hide: !prevState.hide,\n        text: JSON.parse(localStorage.getItem(\"text\"))\n      }));\n    });\n\n    _defineProperty(this, \"inputTag\", __jsx(\"form\", {\n      onSubmit: this.submitHandler\n    }, __jsx(\"input\", {\n      ref: this._input,\n      type: \"text\"\n    })));\n  }\n\n  showText() {\n    return this.state.show ? __jsx(\"span\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      className: \"Json-String\"\n    }, '\"' + this.props.value + '\"', \",\") : this.inputTag;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"Json-Item\"\n    }, __jsx(\"div\", {\n      className: \"Json-Key\"\n    }, this.props.name, \" : \"), __jsx(\"div\", {\n      onClick: this.click,\n      className: \"Json-Value\"\n    }, this.state.hide ? __jsx(\"span\", {\n      style: {\n        color: \"green\"\n      }\n    }, \"\\\"\", this.state.text, \"\\\"\") : this.showText()));\n  }\n\n}\n\nJsonString.displayName = \"JsonString\";\n\nclass JsonLink extends JsonString {\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-String\"\n    }, \"\\\"\", __jsx(\"a\", {\n      href: this.props.value,\n      target: \"_blank\"\n    }, this.props.value), \"\\\"\");\n  }\n\n}\n\nJsonLink.displayName = \"JsonLink\";\n\nclass JsonInteger extends JsonString {\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-Number\"\n    }, this.props.value);\n  }\n\n}\n\nJsonInteger.displayName = \"JsonInteger\";\n\nclass JsonBoolean extends JsonString {\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-Number\"\n    }, JSON.stringify(this.props.value));\n  }\n\n}\n\nJsonString.displayName = \"JsonBoolean\";\n\nclass JsonDate extends JsonString {\n  formatDate(dates) {\n    const today = new Date(dates);\n    let day = today.getDate();\n    let month = today.getMonth() + 1;\n    let year = today.getFullYear();\n    if (day < 10) return day = \"0\" + day;\n    if (month < 10) return month = \"0\" + month;\n    return day + \".\" + month + \".\" + year;\n  }\n\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-Number\"\n    }, this.formatDate(this.props.value));\n  }\n\n}\n\nJsonDate.displayName = \"JsonDate\";\n\nclass JsonArray extends JsonString {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      depth: this.props.depth,\n      color: \"#000\"\n    });\n\n    _defineProperty(this, \"handleVisibility\", () => this.setState({\n      depth: this.state.depth + (this.props.value.length - 1),\n      color: \"#00f\"\n    }));\n  }\n\n  render() {\n    return __jsx(HideData, _extends({}, this.props, {\n      title: this.props.name\n    }), __jsx(\"span\", {\n      className: \"array\"\n    }, \"[\"), this.props.value.slice(0, this.state.depth).map((item, index) => {\n      return __jsx(KeyValue, {\n        name: index,\n        value: item,\n        key: item + \"-\" + index\n      });\n    }), this.state.depth < this.props.value.length && __jsx(\"span\", {\n      className: \"more-btn\",\n      onClick: this.handleVisibility,\n      style: {\n        color: this.state.color\n      },\n      title: \"Click to expand\"\n    }, \"...\"), __jsx(\"span\", {\n      className: \"array\"\n    }, \"]\"));\n  }\n\n}\n\nJsonArray.displayName = \"JsonArray\";\n\nclass JsonObject extends JsonString {\n  render() {\n    return __jsx(HideData, _extends({}, this.props, {\n      title: this.props.name\n    }), __jsx(\"span\", {\n      className: \"array\"\n    }, \"{\"), Object.keys(this.props.value).map((item, index) => __jsx(KeyValue, {\n      name: item,\n      value: this.props.value[item],\n      key: item + \"_\" + index\n    })), __jsx(\"span\", {\n      className: \"array\"\n    }, \"}\"));\n  }\n\n}\n\nJsonObject.displayName = \"JsonObject\";\n\nclass JsonFunc extends JsonString {\n  nameHandler() {\n    let regExpress = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\n    let regName = /([^\\s,]+)/g;\n    let endPoint = this.props.value.toString().replace(regExpress, \"\");\n    let result = endPoint.slice(endPoint.indexOf(\"(\") + 1, endPoint.indexOf(\")\")).match(regName);\n    if (result === null) result = [];\n    return result;\n  }\n\n  render() {\n    let code = this.props.value.toString().split(\"\\n\");\n    return __jsx(HideData, _extends({}, this.props, {\n      title: this.props.value.name + \"(\" + this.nameHandler() + \")\"\n    }), __jsx(\"div\", {\n      className: \"Json-Item Json-Func\"\n    }, code.map((each, index) => {\n      return __jsx(\"div\", {\n        className: \"Json-Func-Line\",\n        key: \"each_\" + index\n      }, each);\n    })));\n  }\n\n}\n\nJsonFunc.displayName = \"JsonFunc\";\nexport default Json;","map":null,"metadata":{},"sourceType":"module"}