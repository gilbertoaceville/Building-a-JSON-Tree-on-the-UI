{"ast":null,"code":"var _jsxFileName = \"/home/ace/Documents/Next JS/react-json-tree/pages/JsonTree.js\",\n    _React$PropTypes,\n    _React$PropTypes2,\n    _React$PropTypes3,\n    _React$PropTypes4,\n    _React$PropTypes5;\n\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\n// Component returning JSON-string as a tree\nimport React, { Component, useState, createRef } from \"react\";\n/*\n *  default jsonRules for rendering basic types\n */\n\nlet jsonRules = [\n/* null */\n(name, value) => value === null ? __jsx(JsonString, {\n  name: name,\n  value: \"null\",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 22\n  }\n}) : null,\n/* function */\n(name, value) => typeof value === \"function\" ? __jsx(JsonFunc, {\n  name: name,\n  value: value,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 35\n  }\n}) : null,\n/* iso date-time */\n(name, value) => typeof value === \"string\" && !isNaN(Date.parse(value)) ? __jsx(JsonDate, {\n  name: name,\n  value: value,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 7\n  }\n}) : null, //\n\n/* url */\n(name, value) => typeof value === \"string\" && (value.indexOf(\"http://\") === 0 || value.indexOf(\"https://\") === 0 || value.indexOf(\"www.\") === 0) ? __jsx(JsonLink, {\n  name: name,\n  value: value,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 7\n  }\n}) : null,\n/* string */\n(name, value) => typeof value === \"string\" ? __jsx(JsonString, {\n  name: name,\n  value: value,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 33\n  }\n}) : null,\n/* integer */\n(name, value) => typeof value === \"number\" ? __jsx(JsonInteger, {\n  name: name,\n  value: value,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 7\n  }\n}) : null,\n/* boolean */\n(name, value) => typeof value === \"boolean\" ? __jsx(JsonBoolean, {\n  name: name,\n  value: value,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 7\n  }\n}) : null,\n/* iterator */\n(name, value, depth) => typeof value === \"object\" && !Array.isArray(value) && typeof value[Symbol.iterator] === \"function\" ? __jsx(JsonArray, {\n  value: Array.from(value),\n  name: name + \"[iterable]\",\n  depth: depth,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 7\n  }\n}) : null,\n/* array */\n(name, value, depth) => typeof value === \"object\" && Array.isArray(value) ? __jsx(JsonArray, {\n  depth: depth,\n  value: value,\n  name: name + \" [ \" + value.length + \" ] \",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 7\n  }\n}) : null,\n/* object */\n(name, value) => typeof value === \"object\" ? __jsx(JsonObject, {\n  value: value,\n  name: name + \" { \" + Object.keys(value).length + \" } \",\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 7\n  }\n}) : null];\n/*\n *   json tree\n */\n\nclass Json extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {}; // merge jsonRules with custom data\n\n    jsonRules = Array.prototype.concat(this.props.jsonRules || [], jsonRules); // see if the parameter is json string or js obj\n\n    if (typeof this.props.data === \"string\") {\n      try {\n        let obj = JSON.parse(this.props.data);\n        this._dataObject = obj;\n      } catch (err) {\n        throw \"Error: cannot convert json string to object. \" + err;\n        this._dataObject = {};\n      }\n    } else if (typeof this.props.data === \"object\") {\n      this._dataObject = this.props.data;\n    } else {\n      throw \"Error: Data is not in the expected format. provided data = \" + JSON.stringify(this.props.data);\n    }\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"Json\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 7\n      }\n    }, __jsx(KeyValue, _extends({\n      name: this.props.title || \"\",\n      value: this._dataObject\n    }, this.props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    })));\n  }\n\n}\n\nJson.propTypes = {\n  title: ((_React$PropTypes = React.PropTypes) === null || _React$PropTypes === void 0 ? void 0 : _React$PropTypes.string) || \"results\",\n  jsonRules: (_React$PropTypes2 = React.PropTypes) === null || _React$PropTypes2 === void 0 ? void 0 : _React$PropTypes2.arrayOf(React.PropTypes.func),\n  data: (_React$PropTypes3 = React.PropTypes) === null || _React$PropTypes3 === void 0 ? void 0 : _React$PropTypes3.oneOfType([(_React$PropTypes4 = React.PropTypes) === null || _React$PropTypes4 === void 0 ? void 0 : _React$PropTypes4.object, (_React$PropTypes5 = React.PropTypes) === null || _React$PropTypes5 === void 0 ? void 0 : _React$PropTypes5.string]).isRequired\n};\nJson.displayName = \"JsonTree\";\n/*\n *   key-value pairs\n */\n\nconst KeyValue = props => {\n  let ret;\n\n  for (let i = 0; i < jsonRules.length; i++) {\n    let processed = jsonRules[i](props.name, props.value, props.depth);\n\n    if (processed) {\n      ret = processed;\n      break;\n    }\n  }\n\n  return ret;\n};\n\nKeyValue.displayName = \"KeyValue\";\n/*\n *  HideData panel component\n */\n\nconst HideData = props => {\n  const {\n    0: open,\n    1: setOpen\n  } = useState(true);\n\n  const toggle = e => {\n    e.preventDefault();\n    setOpen(!open);\n  };\n\n  return __jsx(\"div\", {\n    className: \"Json-Item\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"Json-Key\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 7\n    }\n  }, __jsx(\"a\", {\n    href: \"#\",\n    onClick: toggle,\n    className: \"HideData-Arrow\" + (open ? \" Open\" : \"\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 9\n    }\n  }, \"\\u25BC\"), __jsx(\"a\", {\n    href: \"#\",\n    onClick: toggle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }, open ? props.title + \":\" : props.title.includes(\"{\") ? \"{...}\" : \"[...]\")), __jsx(\"div\", {\n    className: \"HideData-Content Json-Value child-element\" + (open ? \"\" : \" Hidden\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }\n  }, props.children));\n};\n\nclass JsonString extends Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      show: true,\n      hide: false,\n      text: null\n    });\n\n    _defineProperty(this, \"_input\", /*#__PURE__*/createRef());\n\n    _defineProperty(this, \"click\", () => {\n      this.setState({\n        show: false\n      });\n    });\n\n    _defineProperty(this, \"submitHandler\", e => {\n      e.preventDefault();\n      localStorage.setItem(\"text\", JSON.stringify(this._input.current.value));\n      this.setState(prevState => ({\n        hide: !prevState.hide,\n        text: JSON.parse(localStorage.getItem(\"text\"))\n      }));\n    });\n\n    _defineProperty(this, \"inputTag\", __jsx(\"form\", {\n      onSubmit: this.submitHandler,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 5\n      }\n    }, __jsx(\"input\", {\n      ref: this._input,\n      type: \"text\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 7\n      }\n    })));\n  }\n\n  showText() {\n    return this.state.show ? __jsx(\"span\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      className: \"Json-String\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 7\n      }\n    }, '\"' + this.props.value + '\"', \",\") : this.inputTag;\n  }\n\n  render() {\n    return __jsx(\"div\", {\n      className: \"Json-Item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 7\n      }\n    }, __jsx(\"div\", {\n      className: \"Json-Key\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }\n    }, this.props.name, \" : \"), __jsx(\"div\", {\n      onClick: this.click,\n      className: \"Json-Value\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 9\n      }\n    }, this.state.hide ? __jsx(\"span\", {\n      style: {\n        color: \"green\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 13\n      }\n    }, \"\\\"\", this.state.text, \"\\\"\") : this.showText()));\n  }\n\n}\n\nJsonString.displayName = \"JsonString\";\n\nclass JsonLink extends JsonString {\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-String\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }\n    }, \"\\\"\", __jsx(\"a\", {\n      href: this.props.value,\n      target: \"_blank\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }\n    }, this.props.value), \"\\\"\");\n  }\n\n}\n\nJsonLink.displayName = \"JsonLink\";\n\nclass JsonInteger extends JsonString {\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-Number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 12\n      }\n    }, this.props.value);\n  }\n\n}\n\nJsonInteger.displayName = \"JsonInteger\";\n\nclass JsonBoolean extends JsonString {\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-Number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 7\n      }\n    }, JSON.stringify(this.props.value));\n  }\n\n}\n\nJsonString.displayName = \"JsonBoolean\";\n\nclass JsonDate extends JsonString {\n  formatDate(dates) {\n    const today = new Date(dates);\n    let day = today.getDate();\n    let month = today.getMonth() + 1;\n    let year = today.getFullYear();\n    if (day < 10) return day = \"0\" + day;\n    if (month < 10) return month = \"0\" + month;\n    return day + \".\" + month + \".\" + year;\n  }\n\n  showText() {\n    return __jsx(\"span\", {\n      className: \"Json-Number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 297,\n        columnNumber: 7\n      }\n    }, this.formatDate(this.props.value));\n  }\n\n}\n\nJsonDate.displayName = \"JsonDate\";\n\nclass JsonArray extends JsonString {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      depth: this.props.depth,\n      color: \"#000\"\n    });\n\n    _defineProperty(this, \"handleVisibility\", () => this.setState({\n      depth: this.state.depth + (this.props.value.length - 1),\n      color: \"#00f\"\n    }));\n  }\n\n  render() {\n    return __jsx(HideData, _extends({}, this.props, {\n      title: this.props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 7\n      }\n    }), __jsx(\"span\", {\n      className: \"array\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 9\n      }\n    }, \"[\"), this.props.value.slice(0, this.state.depth).map((item, index) => {\n      return __jsx(KeyValue, {\n        name: index,\n        value: item,\n        key: item + \"-\" + index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }\n      });\n    }), this.state.depth < this.props.value.length && __jsx(\"span\", {\n      className: \"more-btn\",\n      onClick: this.handleVisibility,\n      style: {\n        color: this.state.color\n      },\n      title: \"Click to expand\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }\n    }, \"...\"), __jsx(\"span\", {\n      className: \"array\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }\n    }, \"]\"));\n  }\n\n}\n\nJsonArray.displayName = \"JsonArray\";\n\nclass JsonObject extends JsonString {\n  render() {\n    return __jsx(HideData, _extends({}, this.props, {\n      title: this.props.name,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 7\n      }\n    }), __jsx(\"span\", {\n      className: \"array\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }\n    }, \"{\"), Object.keys(this.props.value).map((item, index) => __jsx(KeyValue, {\n      name: item,\n      value: this.props.value[item],\n      key: item + \"_\" + index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }\n    })), __jsx(\"span\", {\n      className: \"array\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 351,\n        columnNumber: 9\n      }\n    }, \"}\"));\n  }\n\n}\n\nJsonObject.displayName = \"JsonObject\";\n\nclass JsonFunc extends JsonString {\n  nameHandler() {\n    let regExpress = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\n    let regName = /([^\\s,]+)/g;\n    let endPoint = this.props.value.toString().replace(regExpress, \"\");\n    let result = endPoint.slice(endPoint.indexOf(\"(\") + 1, endPoint.indexOf(\")\")).match(regName);\n    if (result === null) result = [];\n    return result;\n  }\n\n  render() {\n    let code = this.props.value.toString().split(\"\\n\");\n    return __jsx(HideData, _extends({}, this.props, {\n      title: this.props.value.name + \"(\" + this.nameHandler() + \")\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 7\n      }\n    }), __jsx(\"div\", {\n      className: \"Json-Item Json-Func\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }\n    }, code.map((each, index) => {\n      return __jsx(\"div\", {\n        className: \"Json-Func-Line\",\n        key: \"each_\" + index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 15\n        }\n      }, each);\n    })));\n  }\n\n}\n\nJsonFunc.displayName = \"JsonFunc\";\nexport default Json;","map":{"version":3,"sources":["/home/ace/Documents/Next JS/react-json-tree/pages/JsonTree.js"],"names":["React","Component","useState","createRef","jsonRules","name","value","isNaN","Date","parse","indexOf","depth","Array","isArray","Symbol","iterator","from","length","Object","keys","Json","constructor","props","state","prototype","concat","data","obj","JSON","_dataObject","err","stringify","render","title","propTypes","PropTypes","string","arrayOf","func","oneOfType","object","isRequired","displayName","KeyValue","ret","i","processed","HideData","open","setOpen","toggle","e","preventDefault","includes","children","JsonString","show","hide","text","setState","localStorage","setItem","_input","current","prevState","getItem","submitHandler","showText","cursor","inputTag","click","color","JsonLink","JsonInteger","JsonBoolean","JsonDate","formatDate","dates","today","day","getDate","month","getMonth","year","getFullYear","JsonArray","slice","map","item","index","handleVisibility","JsonObject","JsonFunc","nameHandler","regExpress","regName","endPoint","toString","replace","result","match","code","split","each"],"mappings":"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","sourcesContent":["// Component returning JSON-string as a tree\n\nimport React, { Component, useState, createRef } from \"react\";\n\n/*\n *  default jsonRules for rendering basic types\n */\nlet jsonRules = [\n  /* null */\n  (name, value) =>\n    value === null ? <JsonString name={name} value={\"null\"} /> : null,\n\n  /* function */\n  (name, value) =>\n    typeof value === \"function\" ? <JsonFunc name={name} value={value} /> : null,\n\n  /* iso date-time */\n  (name, value) =>\n    typeof value === \"string\" && !isNaN(Date.parse(value)) ? (\n      <JsonDate name={name} value={value} />\n    ) : null, //\n\n  /* url */\n  (name, value) =>\n    typeof value === \"string\" &&\n    (value.indexOf(\"http://\") === 0 ||\n      value.indexOf(\"https://\") === 0 ||\n      value.indexOf(\"www.\") === 0) ? (\n      <JsonLink name={name} value={value} />\n    ) : null,\n\n  /* string */\n  (name, value) =>\n    typeof value === \"string\" ? <JsonString name={name} value={value} /> : null,\n\n  /* integer */\n  (name, value) =>\n    typeof value === \"number\" ? (\n      <JsonInteger name={name} value={value} />\n    ) : null,\n\n  /* boolean */\n  (name, value) =>\n    typeof value === \"boolean\" ? (\n      <JsonBoolean name={name} value={value} />\n    ) : null,\n\n  /* iterator */\n  (name, value, depth) =>\n    typeof value === \"object\" &&\n    !Array.isArray(value) &&\n    typeof value[Symbol.iterator] === \"function\" ? (\n      <JsonArray\n        value={Array.from(value)}\n        name={name + \"[iterable]\"}\n        depth={depth}\n      />\n    ) : null,\n\n  /* array */\n  (name, value, depth) =>\n    typeof value === \"object\" && Array.isArray(value) ? (\n      <JsonArray\n        depth={depth}\n        value={value}\n        name={name + \" [ \" + value.length + \" ] \"}\n      />\n    ) : null,\n\n  /* object */\n  (name, value) =>\n    typeof value === \"object\" ? (\n      <JsonObject\n        value={value}\n        name={name + \" { \" + Object.keys(value).length + \" } \"}\n      />\n    ) : null,\n];\n\n/*\n *   json tree\n */\nclass Json extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {};\n\n    // merge jsonRules with custom data\n    jsonRules = Array.prototype.concat(this.props.jsonRules || [], jsonRules);\n\n    // see if the parameter is json string or js obj\n    if (typeof this.props.data === \"string\") {\n      try {\n        let obj = JSON.parse(this.props.data);\n        this._dataObject = obj;\n      } catch (err) {\n        throw \"Error: cannot convert json string to object. \" + err;\n        this._dataObject = {};\n      }\n    } else if (typeof this.props.data === \"object\") {\n      this._dataObject = this.props.data;\n    } else {\n      throw (\n        \"Error: Data is not in the expected format. provided data = \" +\n        JSON.stringify(this.props.data)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"Json\">\n        <KeyValue\n          name={this.props.title || \"\"}\n          value={this._dataObject}\n          {...this.props}\n        />\n      </div>\n    );\n  }\n}\n\nJson.propTypes = {\n  title: React.PropTypes?.string || \"results\",\n\n  jsonRules: React.PropTypes?.arrayOf(React.PropTypes.func),\n\n  data: React.PropTypes?.oneOfType([\n    React.PropTypes?.object,\n    React.PropTypes?.string,\n  ]).isRequired,\n};\n\nJson.displayName = \"JsonTree\";\n\n/*\n *   key-value pairs\n */\nconst KeyValue = (props) => {\n  let ret;\n\n  for (let i = 0; i < jsonRules.length; i++) {\n    let processed = jsonRules[i](props.name, props.value, props.depth);\n    if (processed) {\n      ret = processed;\n      break;\n    }\n  }\n\n  return ret;\n};\n\nKeyValue.displayName = \"KeyValue\";\n\n/*\n *  HideData panel component\n */\nconst HideData = (props) => {\n  const [open, setOpen] = useState(true);\n\n  const toggle = (e) => {\n    e.preventDefault();\n    setOpen(!open);\n  };\n\n  return (\n    <div className=\"Json-Item\">\n      <div className=\"Json-Key\">\n        <a\n          href=\"#\"\n          onClick={toggle}\n          className={\"HideData-Arrow\" + (open ? \" Open\" : \"\")}\n        >\n          ▼\n        </a>\n        <a href=\"#\" onClick={toggle}>\n          {open\n            ? props.title + \":\"\n            : props.title.includes(\"{\")\n            ? \"{...}\"\n            : \"[...]\"}\n        </a>\n      </div>\n      <div\n        className={\n          \"HideData-Content Json-Value child-element\" + (open ? \"\" : \" Hidden\")\n        }\n      >\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nclass JsonString extends Component {\n  state = { show: true, hide: false, text: null };\n\n  //ref\n  _input = createRef();\n\n  //toggle between props.value and inputTag\n  click = () => {\n    this.setState({ show: false });\n  };\n\n  //form submission\n  //only Json.Strings is enlisted using these algorithm\n  submitHandler = (e) => {\n    e.preventDefault();\n    localStorage.setItem(\"text\", JSON.stringify(this._input.current.value));\n    this.setState(prevState => ({\n      hide: !prevState.hide,\n      text: JSON.parse(localStorage.getItem(\"text\"))\n    }))\n  };\n\n  inputTag = (\n    <form onSubmit={this.submitHandler}>\n      <input ref={this._input} type=\"text\" />\n    </form>\n  );\n\n  showText() {\n    return this.state.show ? (\n      <span style={{ cursor: \"pointer\" }} className=\"Json-String\">\n        {'\"' + this.props.value + '\"'},\n      </span>\n    ) : (\n      this.inputTag\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"Json-Item\">\n        <div className=\"Json-Key\">{this.props.name} : </div>\n        <div onClick={this.click} className=\"Json-Value\">\n          {this.state.hide ? (\n            <span style={{ color: \"green\" }}>\"{this.state.text}\"</span>\n          ) : (\n            this.showText()\n          )}\n        </div>\n      </div>\n    );\n  }\n}\nJsonString.displayName = \"JsonString\";\n\nclass JsonLink extends JsonString {\n  showText() {\n    return (\n      <span className=\"Json-String\">\n        \"\n        <a href={this.props.value} target=\"_blank\">\n          {this.props.value}\n        </a>\n        \"\n      </span>\n    );\n  }\n}\nJsonLink.displayName = \"JsonLink\";\n\nclass JsonInteger extends JsonString {\n  showText() {\n    return <span className=\"Json-Number\">{this.props.value}</span>;\n  }\n}\nJsonInteger.displayName = \"JsonInteger\";\n\nclass JsonBoolean extends JsonString {\n  showText() {\n    return (\n      <span className=\"Json-Number\">{JSON.stringify(this.props.value)}</span>\n    );\n  }\n}\nJsonString.displayName = \"JsonBoolean\";\n\nclass JsonDate extends JsonString {\n  formatDate(dates) {\n    const today = new Date(dates);\n    let day = today.getDate();\n    let month = today.getMonth() + 1;\n    let year = today.getFullYear();\n\n    if (day < 10) return (day = \"0\" + day);\n    if (month < 10) return (month = \"0\" + month);\n\n    return day + \".\" + month + \".\" + year;\n  }\n\n  showText() {\n    return (\n      <span className=\"Json-Number\">{this.formatDate(this.props.value)}</span>\n    );\n  }\n}\nJsonDate.displayName = \"JsonDate\";\n\nclass JsonArray extends JsonString {\n  state = { depth: this.props.depth, color: \"#000\" };\n\n  handleVisibility = () =>\n    this.setState({\n      depth: this.state.depth + (this.props.value.length - 1),\n      color: \"#00f\",\n    });\n  render() {\n    return (\n      <HideData {...this.props} title={this.props.name}>\n        {/* if array, value is rendered as an array */}\n        <span className=\"array\">{\"[\"}</span>\n        {this.props.value.slice(0, this.state.depth).map((item, index) => {\n          return (\n            <KeyValue name={index} value={item} key={item + \"-\" + index} />\n          );\n        })}\n        {this.state.depth < this.props.value.length && (\n          <span\n            className=\"more-btn\"\n            onClick={this.handleVisibility}\n            style={{ color: this.state.color }}\n            title=\"Click to expand\"\n          >\n            ...\n          </span>\n        )}\n        <span className=\"array\">{\"]\"}</span>\n      </HideData>\n    );\n  }\n}\nJsonArray.displayName = \"JsonArray\";\n\nclass JsonObject extends JsonString {\n  render() {\n    return (\n      <HideData {...this.props} title={this.props.name}>\n        {/* if array, value is rendered as an object */}\n        <span className=\"array\">{\"{\"}</span>\n        {Object.keys(this.props.value).map((item, index) => (\n          <KeyValue\n            name={item}\n            value={this.props.value[item]}\n            key={item + \"_\" + index}\n          />\n        ))}\n        <span className=\"array\">{\"}\"}</span>\n      </HideData>\n    );\n  }\n}\nJsonObject.displayName = \"JsonObject\";\n\nclass JsonFunc extends JsonString {\n  nameHandler() {\n    let regExpress = /((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/))/gm;\n    let regName = /([^\\s,]+)/g;\n\n    let endPoint = this.props.value.toString().replace(regExpress, \"\");\n    let result = endPoint\n      .slice(endPoint.indexOf(\"(\") + 1, endPoint.indexOf(\")\"))\n      .match(regName);\n    if (result === null) result = [];\n    return result;\n  }\n\n  render() {\n    let code = this.props.value.toString().split(\"\\n\");\n\n    return (\n      <HideData\n        {...this.props}\n        title={this.props.value.name + \"(\" + this.nameHandler() + \")\"}\n      >\n        <div className=\"Json-Item Json-Func\">\n          {code.map((each, index) => {\n            return (\n              <div className=\"Json-Func-Line\" key={\"each_\" + index}>\n                {each}\n              </div>\n            );\n          })}\n        </div>\n      </HideData>\n    );\n  }\n}\nJsonFunc.displayName = \"JsonFunc\";\n\nexport default Json;\n"]},"metadata":{},"sourceType":"module"}